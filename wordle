#!/usr/bin/python3

# SPDX-License-Identifier: GPL-2.0-or-later

from collections import namedtuple
import subprocess
import sys
from enum import Enum

LetterPosition = namedtuple('LetterPosition', ['choices'])
LetterScore = namedtuple('LetterScore', ['index', 'letter', 'score'])

class LetterState(Enum):
    UNUSED = 1
    USED = 2
    LOCATED = 3


class VT100BackgroundColor(Enum):
    BLACK = '\033[40m'
    YELLOW = '\033[43m'
    GREEN = '\033[42m'
    DEFAULT = '\033[49m'


def initialise():
    return [LetterPosition(set(chr(ord('a') + i) for i in range(26))) for j in range(5)]


def score_guess(answer, guess):
    score = []
    for i, l in enumerate(guess):
        if l == answer[i]:
            state = LetterState.LOCATED
        elif l in answer:
            state = LetterState.USED
        else:
            state = LetterState.UNUSED
        score.append(LetterScore(i, l, state))
    return score


def update(current, score):
    updated = [LetterPosition(e.choices) for e in current]
    for i, l, s in score:
        if s == LetterState.LOCATED:
            updated[i].choices.intersection_update(set(l))
        elif s == LetterState.USED:
            updated[i].choices.discard(l)
        else:
            assert(s == LetterState.UNUSED)
            for u in updated:
                u.choices.discard(l)
    return updated


def gen_regex_pos(lp):
    return "[{}]".format("".join(lp.choices))


def gen_regex_guess(current):
    regex = "{}" * (len(current) + 2)
    return regex.format(*(['^'] + [gen_regex_pos(e) for e in current] + ['$']))


def pick_word():
    cmdline = 'grep -E "^[a-z]{5}$" /usr/share/dict/words | shuf -n 1 -'
    pickc = subprocess.run(cmdline, capture_output=True,
                           check=True, shell=True)
    return pickc.stdout.decode('utf-8').strip()


def guess_word(re):
    cmdline = 'shuf /usr/share/dict/words | grep -E -m 1 {}'.format(re)
    guessc = subprocess.run(
        cmdline, capture_output=True, check=True, shell=True)
    return guessc.stdout.decode('utf-8').strip()


def highlight_scored(score):
    seen = set()
    highlight = ""
    for i, l, s in score:
        if s == LetterState.LOCATED:
            color = VT100BackgroundColor.GREEN
        elif s == LetterState.USED:
            if l in seen:
                color = VT100BackgroundColor.DEFAULT
            else:
                color = VT100BackgroundColor.YELLOW
        else:
            assert(s == LetterState.UNUSED)
            color = VT100BackgroundColor.BLACK
        seen.add(l)
        highlight += "{}{}".format(color.value, l)
    else:
        highlight += VT100BackgroundColor.DEFAULT.value
    return highlight


pick = pick_word() if len(sys.argv) <= 1 else sys.argv[1]
print("Chose target word: {}".format(pick))
guess = ""
current = initialise()
for i in range(6):
    guessed = False
    re = gen_regex_guess(current)
    guess = guess_word(re)
    score = score_guess(pick, guess)
    print("{}: {}".format(i, highlight_scored(score)))
    if guess == pick:
        print("Found the target word!")
        break
    current = update(current, score)
else:
    print("Failed to find the target word: {}".format(pick))
